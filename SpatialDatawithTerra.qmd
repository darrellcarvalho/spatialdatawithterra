---
title: "Spatial Data with terra Workthrough"
author: "Darrell A. Carvalho"
format: html
editor: visual
---

# Simple Representation of Spatial Data

```{r data-setup}
library(terra)
name <- LETTERS[1:10]
longitude <- c(-116.7, -120.4, -116.7, -113.5, -115.5,
               -120.8, -119.5, -113.7, -113.7, -110.7)
latitude <- c(45.3, 42.6, 38.9, 42.1, 35.7, 38.9,
              36.2, 39, 41.6, 36.9)
stations <- cbind(longitude, latitude) # bind by columns
```

The `echo: false` option disables the printing of code (only output is displayed).

```{r synthetic-rain-data}
set.seed(0)
precip <- round((runif(length(latitude))*10)^3)
```

```{r mapping}
psize <- 1 + precip/500
plot(stations, cex=psize, pch=20, col='red', main='Precipitation')
# add names to plot
text(stations, name, pos=4)
# add a legend
breaks <- c(100, 250, 500, 1000)
legend.psize <- 1+breaks/500
legend("topright", legend=breaks, pch=20, pt.cex=legend.psize, col='red', bg='gray')
```

## **A Basic Demonstration of Overplotting Lines and Polygons (`base r`**)

```{r Second-Percipitation-Plot}
lon <- c(-116.8, -114.2, -112.9, -111.9, -114.2, -115.4, -117.7)
lat <- c(41.3, 42.9, 42.4, 39.8, 37.6, 38.3, 37.6)
x <- cbind(lon, lat)
plot(stations, main='Precipitation')
polygon(x, col='blue', border='light blue')
lines(stations, lwd=3, col='red')
points(x, cex=2, pch=20)
points(stations, cex=psize, pch=20, col='red', main='Precipitation')
```

```{r Spatial-Data-Frame}
wst <- data.frame(longitude, latitude, name, precip)
wst
##    longitude latitude name precip
## 1     -116.7     45.3    A    721
## 2     -120.4     42.6    B     19
## 3     -116.7     38.9    C     52
## 4     -113.5     42.1    D    188
## 5     -115.5     35.7    E    749
## 6     -120.8     38.9    F      8
## 7     -119.5     36.2    G    725
## 8     -113.7     39.0    H    843
## 9     -113.7     41.6    I    289
## 10    -110.7     36.9    J    249
```

# Vector Data in `terra`

-   Data types are defined as classes

    -   class definition allows for the development of methods to operate on data that share the same type

`terra` prefixes its data classes with `Spat`

-   Vector data is `SpatVector`

-   has an extent

-   includes potential coordinate reference system

## Points

```{r SpatVector-Points-From-Scratch}
library(terra)
longitude <- c(-116.7, -120.4, -116.7, -113.5, -115.5, -120.8, -119.5, -113.7, -113.7, -110.7)
latitude <- c(45.3, 42.6, 38.9, 42.1, 35.7, 38.9, 36.2, 39, 41.6, 36.9)

lonlat <- cbind(longitude, latitude) # join coordinates

pts <- vect(lonlat) # create point SpatVector

class(pts) # check its class

plot(pts) # plot it

geom(pts)
```

A CRS can be provided as demonstrated here:

```{r Assign-CRS}
crdref <- "+proj=longlat +datum=WGS84"
pts <- vect(lonlat, crs=crdref)
pts
```

-   Check the CRS using `crs()`

```{r Check-CRS}
crs(pts)
```

```{r Percip-Values}
# Generate random precipitation values, same quantity as points
precipvalue <- runif(nrow(lonlat), min=0, max=100)
df <- data.frame(ID=1:nrow(lonlat), precip=precipvalue)
```

```{r Assign-dataframe-to-SpatVector}
ptv <- vect(lonlat, atts=df, crs=crdref)
ptv
```

## Lines and Polygons

```{r Defining-Lines}
lon <- c(-116.8, -114.2, -112.9, -111.9, -114.2, -115.4, -117.7)
lat <- c(41.3, 42.9, 42.4, 39.8, 37.6, 38.3, 37.6)
lonlat <- cbind(id=1, part=1, lon, lat)

lns <- vect(lonlat, type = "lines", crs=crdref)
lns
```

```{r Polygons}
pols <- vect(lonlat, type = "polygons", crs=crdref)
pols
```

```{r Plotting-Polygons}
plot(pols, las = 1)
plot(pols, border = 'blue', col = 'yellow', lwd = 3, add = TRUE)
points(pts, col = 'red', pch=20, cex=3)
```

# Raster Data in `terra`

```{r Raster-setup}
library(terra)
```

-   Rasters in `terra` are stored as class `SpatRaster`

    -   Always includes:

        -   Dimensionality (rows, columns)

        -   Spatial extent

        -   Coordinate Reference System

    -   May store direction to file raster cell values are stored in

    -   May instead store cell values in-memory

```{r Raster-Geometry-from-Scratch}
r <-rast(ncol=10, nrow=10, xmin=-150, xmax=-80, ymin=20, ymax=60)
r
```

-   `r` above only has geometry; below, we associate values

```{r Raster-Value-Assignment}
values(r) <- runif(ncell(r))
r
```

-   value overwrite and cell-numbering

```{r Raster-Value-Reassignment}
values(r) <- 1:ncell(r)
r
```

```{r Plotting-terra-Rasters}
plot(r)
```

-   Multi-layer/multi-band rasters can be created with `c()`

```{r Multiband-Raster}
r2 <- r*r
r3 <- sqrt(r)
s <- c(r, r2, r3)
s
plot(s)
```

# Reading and Writing Spatial Data in R

## Reading Vectors

```{r Reading-Vectors}
library(terra)
filename <- system.file("ex/lux.shp", package = "terra") # system.file to pull path

basename(filename) #returns just the file name, removing the path

s <- vect(filename) # import the file as a SpatVector file

s
```

## Writing Vectors

```{r Writing-Vectors}
outfile <- "shape_test.shp" # create a variable to export
writeVector(s, outfile, overwrite=TRUE) # store from memory to exported file
```

## Deleting File(s)

```{r Deleting-Vectors}
## CAUTION ##
ff <- list.files(patt = "^shape_test") # store all files matching the pattern
file.remove(ff) # delete all stored files
```

## Reading Rasters

```{r Raster-Reading}
f <- system.file("ex/logo.tif", package = "terra") # store file path
basename(f) # identify file name

r <- rast(f) # store raster file

r2 <- r[[2]] # subset raster layer 2
```

## Writing Rasters

```{r Raster-Writing}
x <- writeRaster(r, "test_output.tif", overwrite=TRUE) # write raster to file
# it is written to file and linked through variable x


## 
ff <- list.files(patt = "^test_output")
file.remove(ff)
```

# Coordinate Reference Systems (CRS)

-   Notation of CRS is usually in Proj.4 (depreciating), EPSG code, or Well-Known Text (WKT) format

## Working with Vector CRS

```{r Retrieve-CRS}
library(terra)
f <- system.file("ex/lux.shp", package="terra") # point to file
p <- vect(f) # import file
p # check the data
crs(p) # check the CRS definition
```

```{r Assign-CRS}
pp <- p # assign to a new variable to preserve original
crs(pp) <- "" # assign empty CRS
crs(pp) # verify empty CRS
crs(pp) <- "+proj=longlat +datum=WGS84" # assign the correct CRS
crs(pp) # verify correct CRS was applied
```

```{r Transform-CRS}
newcrs <- "+proj=robin +datum=WGS84" # store prefered proj string
rob <- terra::project(p, newcrs) # reproject p using the new CRS
rob
```

```{r Backtransform-CRS}
p2 <- terra:project(rob, "+proj=longlat +datum=WGS84")
```

## Working with Raster CRS

-   Transforming rasters not as simple as transforming vectors

    -   rasters need to account for each cell, either computing new values or

```{r Raster-Setup}
r <- rast(xmin=-110, xmax=-90, ymin=40, ymax=60, ncols=40, nrows=40) # demo raster
values(r) <- 1:ncell(r) # assign values
r # check
plot(r)

```

-   Generally, don't project rasters - reproject vectors to conform to rasters.

-   The below demonstration works, but is undesirable

```{r Raster-Projection}
pr1 <- terra::project(r, newcrs) # how to project; generally not advised
crs(pr1) # determine the CRS of the projected raster
plot(pr1)
```

-   Instead, create a SpatRaster to project the data onto

    ```{r Raster-Processing}
    x <- rast(pr1) # define a new raster
    res(x) <- 200000 # assign new resolution
    plot(x) # plot the empty SpatRast
    pr3 <- terra::project(r, x) # reproject based on the Spatrast
    pr3
    plot(pr3)
    ```
